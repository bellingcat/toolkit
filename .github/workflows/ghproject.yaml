# This workflow runs by manual dispatch
name: Sync Github Project
on:
  schedule:
    - cron: '0 2 * * *'
  workflow_dispatch:

jobs:
  sync_crs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: npm install

      - name: Get project data
        env:
          GH_TOKEN: ${{ secrets.GH_PROJECT_TOKEN }}
          ORGANIZATION: bellingcat
          PROJECT_NUMBER: 6
        # Uses [GitHub CLI](https://cli.github.com/manual/) to query the API for the ID of the project and return the name and ID of the first 20 fields in the project. `fields` returns a union and the query uses inline fragments (`... on`) to return information about any `ProjectV2Field` and `ProjectV2SingleSelectField` fields. The response is stored in a file called `project_data.json`.
        run: |
          gh api graphql -f query='
            query($org: String!, $number: Int!) {
              organization(login: $org){
                projectV2(number: $number) {
                  id
                  fields(first:20) {
                    nodes {
                      ... on ProjectV2Field {
                        id
                        name
                      }
                      ... on ProjectV2SingleSelectField {
                        id
                        name
                        options {
                          id
                          name
                        }
                      }
                    }
                  }
                }
              }
            }' -f org=$ORGANIZATION -F number=$PROJECT_NUMBER > project_data.json

          # Parses the response from the API query and stores the relevant IDs as environment variables. Modify this to get the ID for different fields or options. For example:
          #
          # - To get the ID of a field called `Team`, add `echo 'TEAM_FIELD_ID='$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== "Team") | .id' project_data.json) >> $GITHUB_ENV`.
          # - To get the ID of an option called `Octoteam` for the `Team` single select field, add `echo 'OCTOTEAM_OPTION_ID='$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== "Team") |.options[] | select(.name=="Octoteam") |.id' project_data.json) >> $GITHUB_ENV`.
          #
          # **Note:** This workflow assumes a  project with a single select field called "Status" that includes an option called "Review Requested" and a date field called "Date submitted".

          echo 'PROJECT_ID='$(jq '.data.organization.projectV2.id' project_data.json) >> $GITHUB_ENV
          echo 'DATE_FIELD_ID='$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== "Date submitted") | .id' project_data.json) >> $GITHUB_ENV
          echo 'URL_FIELD_ID='$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== "URL") | .id' project_data.json) >> $GITHUB_ENV
          echo 'STATUS_FIELD_ID='$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== "Status") | .id' project_data.json) >> $GITHUB_ENV
          echo 'REVIEW_OPTION_ID='$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== "Status") | .options[] | select(.name=="Review Requested") |.id' project_data.json) >> $GITHUB_ENV


      # Downloads all items from the project and stores them in project_items.json
      - name: Get project items
        env:
          GH_TOKEN: ${{ secrets.GH_PROJECT_TOKEN }}
        run: |
          ./src/project_items.bash

      # Read project_items.json, find item ids that need update '
      - name: Process items
        env:
          GITBOOK_API_TOKEN: ${{ secrets.GITBOOK_API_TOKEN }}
        run: |
          items="$(node src/ghproject.mjs)"
          echo 'PROJECT_ITEMS='$items >> $GITHUB_ENV

      # Sets the value of the `Status` field to `Review Requested`.
      # Sets the value of the `Date submitted` field.'
      # Sets the value of the `URL` field.'
      - name: Update status
        env:
          GH_TOKEN: ${{ secrets.GH_PROJECT_TOKEN }}
        run: |
          for project_item in $PROJECT_ITEMS
          do
            item_id=$(echo $project_item | jq '.id')
            date_submitted=$(echo $project_item | jq -r '.date_submitted')
            echo $date_submitted
            url=$(echo $project_item | jq -r '.url')
            gh api graphql -f query='
              mutation (
                $project: ID!
                $item: ID!
                $status_field: ID!
                $status_value: String!
                $date_field: ID!
                $date_value: Date!
                $url_field: ID!
                $url_value: String!
              ) {
                set_status: updateProjectV2ItemFieldValue(input: {
                  projectId: $project
                  itemId: $item
                  fieldId: $status_field
                  value: {
                    singleSelectOptionId: $status_value
                    }
                }) {
                  projectV2Item {
                    id
                  }
                }
                set_date_posted: updateProjectV2ItemFieldValue(input: {
                  projectId: $project
                  itemId: $item
                  fieldId: $date_field
                  value: {
                    date: $date_value
                  }
                }) {
                  projectV2Item {
                    id
                  }
                }
                set_url: updateProjectV2ItemFieldValue(input: {
                  projectId: $project
                  itemId: $item
                  fieldId: $url_field
                  value: {
                    text: $url_value
                  }
                }) {
                  projectV2Item {
                    id
                  }
                }
              }' -f project=$PROJECT_ID -f item=$item_id -f status_field=$STATUS_FIELD_ID -f status_value=${{ env.REVIEW_OPTION_ID }} -f date_field=$DATE_FIELD_ID -f date_value=$date_submitted -f url_field=$URL_FIELD_ID -f url_value=$url  --silent
              # '
          done


