name: Add Tool
run-name: Add ${{ inputs.toolName }} by @${{ github.actor }}

on:
  workflow_dispatch:
    inputs:
      toolName:
        description: 'Tool Name'
        type: string
        required: true
      email:
        description: 'Team Member Email (optional)'
        type: string
      category:
        description: 'Guardian Category'
        type: choice
        required: true
        options:
          - none
          - archiving
          - image-video
          - companies-and-finance
          - conflict
          - data
          - environment-and-wildlife
          - geolocation
          - maps-and-satellites
          - people
          - social-media
          - transport
          - websites

jobs:
  add-tool:
    runs-on: ubuntu-latest
    env:
      TOOL_NAME: ${{ inputs.toolName }}
      CATEGORY: ${{ inputs.category }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: npm install

      - name: Mask secrets
        run: |
          INPUT_EMAIL==$(jq -r '.inputs.email' $GITHUB_EVENT_PATH)
          echo ::add-mask::$INPUT_EMAIL
          echo EMAIL=$INPUT_EMAIL >> $GITHUB_ENV

      - name: Create Gitbook Space and Team (look here for the link!)
        id: add-space
        env:
          GITBOOK_API_TOKEN: ${{ secrets.GITBOOK_API_TOKEN }}
        run: |
          node src/add-space.mjs "$TOOL_NAME" "$EMAIL" "$CATEGORY"
          if [ -n "$(git status --porcelain)" ]; then
            echo "changes=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Commit changes ${{ steps.add-space.outputs.changes }}
        if: ${{ steps.add-space.outputs.changes == 'true' }}
        run: |
          git status --porcelain
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git commit -m "Add Space $TOOL_NAME"

      - name: Create new tool folder (look here for git sync config!)
        id: add-folder
        run: |
          node src/add-tool.mjs "$TOOL_NAME"
          if [ -n "$(git status --porcelain)" ]; then
            echo "changes=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Commit changes ${{ steps.add-folder.outputs.changes }}
        if: ${{ steps.add-folder.outputs.changes == 'true' }}
        run: |
          git status --porcelain
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git commit -m "Add Tool $TOOL_NAME"

      - name: Push changes
        if: ${{ steps.add-folder.outputs.changes == 'true' || steps.add-space.outputs.changes == 'true' }}
        uses: ad-m/github-push-action@master
        with:
          branch: main

      - name: Get project ID
        env:
          GH_TOKEN: ${{ secrets.GH_PROJECT_TOKEN }}
          ORGANIZATION: bellingcat
          PROJECT_NUMBER: 6
        run: |
          gh api graphql -f query='
            query($org: String!, $number: Int!) {
              organization(login: $org){
                projectV2(number: $number) {
                  id
                }
              }
            }' -f org=$ORGANIZATION -F number=$PROJECT_NUMBER > project_data.json
          #'
          echo 'PROJECT_ID='$(jq '.data.organization.projectV2.id' project_data.json) >> $GITHUB_ENV

      - name: Get project data
        env:
          GH_TOKEN: ${{ secrets.GH_PROJECT_TOKEN }}
          ORGANIZATION: bellingcat
          PROJECT_NUMBER: 6
        # Uses [GitHub CLI](https://cli.github.com/manual/) to query the API for the ID of the project and return the name and ID of the first 20 fields in the project. `fields` returns a union and the query uses inline fragments (`... on`) to return information about any `ProjectV2Field` and `ProjectV2SingleSelectField` fields. The response is stored in a file called `project_data.json`.
        run: |
          gh api graphql -f query='
            query($org: String!, $number: Int!) {
              organization(login: $org){
                projectV2(number: $number) {
                  id
                  fields(first:20) {
                    nodes {
                      ... on ProjectV2Field {
                        id
                        name
                      }
                      ... on ProjectV2SingleSelectField {
                        id
                        name
                        options {
                          id
                          name
                        }
                      }
                    }
                  }
                }
              }
            }' -f org=$ORGANIZATION -F number=$PROJECT_NUMBER > project_data.json

          echo 'PROJECT_ID='$(jq '.data.organization.projectV2.id' project_data.json) >> $GITHUB_ENV
          echo 'DATE_FIELD_ID='$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== "Date submitted") | .id' project_data.json) >> $GITHUB_ENV
          echo 'STATUS_FIELD_ID='$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== "Status") | .id' project_data.json) >> $GITHUB_ENV
          echo 'DRAFT_OPTION_ID='$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== "Status") | .options[] | select(.name=="Draft") |.id' project_data.json) >> $GITHUB_ENV

      - name: Add to Project
        env:
          GH_TOKEN: ${{ secrets.GH_PROJECT_TOKEN }}
          TOOL_NAME: ${{ inputs.toolName }}
        run: |
          item_id="$( gh api graphql -f query='
            mutation (
              $project: ID!
              $tool: String!
            ){
              addProjectV2DraftIssue(input: { projectId: $project title: $tool }) {
                projectItem {
                  id
                }
              }
            }' -f project=$PROJECT_ID -F tool=$TOOL_NAME --jq '.data.addProjectV2DraftIssue.projectItem.id' )"
            echo 'ITEM_ID='$item_id >> $GITHUB_ENV


